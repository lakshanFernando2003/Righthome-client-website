# Right Client Website Project Documentation

## Project Overview
A real estate property search website with advanced filtering capabilities and property management features.

## File Structure
The project follows a component-based architecture with separate concerns for styling and data management.

### Key Components
- SearchBar: Handles basic search functionality
- AdvancedSearch: Provides detailed filtering options
- PropertyCard: Displays individual property previews
- Favorites: Manages saved properties
- PropertyDetails: Shows comprehensive property information
- Footer: Contains site-wide footer content

### Assets Organization
- images/: Stores all project images
- data/: Holds JSON data files

## Custom Styling
### Logo Styling
- Two-part logo design with custom font sizes
- Color scheme uses #2c3e50
- Negative margin applied for part 2 for visual alignment

### Slider Component Styling (rc-slider)
Custom styling for an interactive range slider with:
- Enhanced touch targets (25px height)
- Custom track and rail styling
- Responsive handle design with hover/focus states
- Consistent border radius (7px)
- Shadow effects for depth
- Accessible color scheme

## Development Tasks
1. File structure implementation
2. Component development
3. Data management setup
4. Styling implementation
5. Testing and debugging

## Development Status
Initial setup phase with focus on component architecture and basic styling implementation.
To-Do List for Starting the Project

2. Create Basic File Structure
 Organize the project with the following structure:

3. Implement Components
 SearchForm Component:
Input fields for search filters.
State management for form inputs.
 Results Component:
Render a grid of properties based on search results.
 PropertyDetails Component:
Show detailed information, images, and tabs for each property.
 Favorites Component:
Display saved properties and enable removal.

4. Data Management
 Create a properties.json file with:
Initial 2 properties from the assignment.
Add 5 more properties for variety.
 Add logic to fetch and filter data based on search criteria.

5. Add Styling
 Write basic CSS files for layout and design.
 Include media queries for responsiveness.

6. Testing and Debugging
 Test each component separately.
 Debug layout issues and ensure responsiveness.

## Dependencies and Libraries

### Core Dependencies
```bash
# Create React App with Vite
npm create vite@latest right-client-website -- --template react

# Core dependencies
npm install react-router-dom    # For routing
npm install prop-types         # For type checking
```

### UI and Styling Dependencies
```bash
# UI Components and Icons
npm install react-icons        # For social media and other icons
npm install rc-slider          # For price range slider
npm install @mui/material      # For material UI components
npm install @emotion/react     # Peer dependency for MUI
npm install @emotion/styled    # Peer dependency for MUI
npm install react-zoom-pan-pinch # For image zoom and pan functionality

# Styling
npm install sass              # For SCSS support
```

### Animation and Interaction
```bash
# Animation Libraries
npm install framer-motion     # For smooth animations
npm install react-transition-group  # For component transitions

# Drag and Drop
npm install react-beautiful-dnd    # For drag and drop functionality
```

### Form Handling and Validation
```bash
# Form Management
npm install formik            # For form handling
npm install yup               # For form validation
```

### Development Dependencies
```bash
# Development Tools
npm install -D eslint         # For code linting
npm install -D prettier       # For code formatting
npm install -D vite           # Build tool
```

### Optional Dependencies
```bash
# Additional Features
npm install react-query       # For data fetching
npm install axios            # For HTTP requests
npm install date-fns         # For date formatting
```

### Additional UI and Interaction Libraries
```bash
# Maps and Location
bun add @react-google-maps/api    # Google Maps integration

# Loading States and Notifications
bun add react-loading-skeleton    # Content loading placeholders
bun add react-toastify           # Toast notifications

# Additional Styling
bun add styled-components        # CSS-in-JS styling

# Enhanced Animations
bun add react-spring            # Physics-based animations
bun add @dnd-kit/core          # Modern drag and drop
```

## Version Information
```json
{
  "dependencies": {
    "@emotion/react": "^11.11.1",
    "@emotion/styled": "^11.11.0",
    "@mui/material": "^5.14.13",
    "axios": "^1.5.1",
    "date-fns": "^2.30.0",
    "formik": "^2.4.5",
    "framer-motion": "^10.16.4",
    "prop-types": "^15.8.1",
    "rc-slider": "^10.3.0",
    "react": "^18.2.0",
    "react-beautiful-dnd": "^13.1.1",
    "react-dom": "^18.2.0",
    "react-icons": "^4.11.0",
    "react-query": "^3.39.3",
    "react-router-dom": "^6.16.0",
    "react-transition-group": "^4.4.5",
    "react-zoom-pan-pinch": "^3.1.0",
    "yup": "^1.3.2",
    "@react-google-maps/api": "^2.19.2",
    "react-loading-skeleton": "^3.3.1",
    "react-spring": "^9.7.3",
    "react-toastify": "^9.1.3",
    "styled-components": "^6.0.8",
    "@dnd-kit/core": "^6.0.8"
  },
  "devDependencies": {
    "eslint": "^8.51.0",
    "prettier": "^3.0.3",
    "vite": "^4.4.11"
  }
}
```

## Installation Guide
1. Clone the repository
2. Install dependencies:
```bash
npm install   # Installs all dependencies
# or
npm ci       # Clean install from package-lock.json
```

3. Start the development server:
```bash
npm run dev   # Starts Vite development server
```

//  File Structure

// src/
// ├── components/
// │   ├── SearchBar/
// │   │   ├── SearchBar.jsx
// │   │   ├── SearchBar.css
// │   ├── AdvancedSearch/
// │   │   ├── AdvancedSearch.jsx
// │   │   ├── AdvancedSearch.css
// │   ├── PropertyCard/
// │   │   ├── PropertyCard.jsx
// │   │   ├── PropertyCard.css
// │   ├── Favorites/
// │   │   ├── Favorites.jsx
// │   │   ├── Favorites.css
// │   ├── PropertyDetails/
// │   │   ├── PropertyDetails.jsx
// │   │   ├── PropertyDetails.css
// │   ├── Footer/
// │   │   ├── Footer.jsx
// │   │   ├── Footer.css
// ├── assets/
// │   ├── images/
// │   ├── styles/
// │   │   ├── global.css
// ├── data/
// │   ├── properties.json
// ├── App.js
// ├── index.js

company logo custom styles
 .logo-part1, .logo-part2 {
  font-size: 1.5rem;
  color: #2c3e50;
  margin: 4px;
}
.logo-part2{
  margin-left: -0.93rem;
}

.logo-letter {
  font-size: 3rem;
  color: #2c3e50;
}


Custom css for the slider
/* Custom styles for rc-slider */
.rc-slider {
  margin: 10px 0;
  height: 15px !important;
  background-color: #f9f9f9;
  border-radius: 7px;
}

.rc-slider-rail {
  background-color: #f9f9f9 !important;
  height: 25px !important;
  border-radius: 7px !important;
  border: 1px solid #ccc !important;
  margin-top: -0.35rem !important;
}

.rc-slider-track {
  background-color: #e8e8e8 !important;
  height: 20px !important;
  margin-top: -0.2rem !important;
  border-radius: 7px !important;
}

.rc-slider-handle {
  width: 25px !important;
  height: 24px !important;
  background-color: #ffffff !important;
  border: 2px solid #c3c3c3 !important;
  margin-top: -5px !important;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2) !important;
  cursor: pointer !important;
  border-radius: 4px !important;
}

.rc-slider-handle:focus {
  outline: none !important;
  border-color: #bcbcbc !important;
  box-shadow: 0 0 6px rgba(0, 0, 0, 0.4) !important;
}

.rc-slider-handle:hover {
  background-color: #f5f5f5 !important;
  border-color: #bcbcbc !important;
}

.rc-slider-mark {
  font-size: 12px;
  color: #444444 !important;
}
